<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>多洛的黑猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-27T05:31:56.667Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>thor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日语语句、语法和知识点</title>
    <link href="http://yoursite.com/2019/02/27/%E6%97%A5%E8%AF%AD%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/27/日语笔记/</id>
    <published>2019-02-27T04:47:00.000Z</published>
    <updated>2019-02-27T05:31:56.667Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>写在前面:</p><p><strong>万事开头难。</strong></p><a id="more"></a><hr><h1 id="常用语句和词汇"><a href="#常用语句和词汇" class="headerlink" title="常用语句和词汇"></a>常用语句和词汇</h1><hr><ol><li><p>おまいはにほん.んではありません！わたしはちゆくのりゆうがくせです。我不是日本人。我是中国人。</p></li><li><p>きみのまいはさくらですが。你的名字是sakura吗？<br>はい，そうです。是，没错。<br>いいえ，ちがいます。不，不是的。<br>いいえ，そうではありません。不，不是这样。<br>おさんもではありませんね。小王也不是吧？<br>そうです，わたしもおさんもではありません。我和小王都不是。</p></li><li><p>だれ?どなた？谁？谁吖？</p></li><li><p>にほんとちゆうこく。日本和中国。<br>がくせいとせんせい。学生和老师。</p></li><li><p>りさんはだいがくいんせいですね。李先生是大学生吧？</p></li></ol><hr><h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><pre><code>由于学识不足，尚不能补充例句时间：2019/02/27</code></pre><hr><ol><li><p>あと：</p><ol><li>释义：……之后</li><li>用法：<ol><li>Nの+あとで</li><li>Vた+あとで</li></ol></li><li>例句：</li></ol></li><li><p>あまり~~ない</p><ol><li>释义：不太……</li><li>用法：あまり~ない中填入谓语或表语表部分否定</li><li>例句：</li></ol></li></ol><hr><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><hr><ol><li>日语里的っ是什么？</li></ol><p>っ是促音，相当于一拍，如果那个a后面还有字的话，比如あっく，输入时是akku，即っ是后面那个罗马音的辅音。念出来あ一拍，空一拍，く一拍。</p><p>っ不发音，是一种顿挫的音节，堵住气流，形成一个短促的顿挫停顿一拍，使气流急冲而出，发出后面的音。</p><p>促音有三种：</p><ol><li>舌尖促音（在さ、た两行音之前），例：がっさく合作、きって邮票；</li><li>喉头促音（在か行音之前），例：にっき日记；</li><li>双唇促音（在ぱ行音之前）例：いっぱい满满的.</li></ol><hr></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;万事开头难。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日语" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="非教学" scheme="http://yoursite.com/tags/%E9%9D%9E%E6%95%99%E5%AD%A6/"/>
    
      <category term="日语" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>hexo设计</title>
    <link href="http://yoursite.com/2019/02/26/hexo%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/02/26/hexo设计/</id>
    <published>2019-02-26T11:47:00.000Z</published>
    <updated>2019-02-26T12:06:38.179Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>写在前面：偏教学性的hexo博客配置设计。<br><a id="more"></a><br>暂无</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：偏教学性的hexo博客配置设计。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="教学" scheme="http://yoursite.com/tags/%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>node杂笔记</title>
    <link href="http://yoursite.com/2019/02/14/node.js%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2019/02/14/node.js学习日志/</id>
    <published>2019-02-14T05:45:22.000Z</published>
    <updated>2019-02-26T11:56:48.677Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>写在前面：由于所学不精，不够系统，笔记只记了感觉容易遗忘的知识点。仅供参考。<br><a id="more"></a></p><h2 id="node-js的三个特点："><a href="#node-js的三个特点：" class="headerlink" title="node.js的三个特点："></a>node.js的三个特点：</h2><p>1.单线程：<br>在java，PHP或net等服务器端语言中会<strong>为每一个客户端链接创建见一个新的线程</strong>，每个线程耗费大约2mb内存——即8gb内存服务器可以同时连接最多4000个用户（故需要增加服务器数量）。<br>而node.js仅使用一个线程（不健壮，但约20mb）。当用户连接会触发内部事件，通过非阻塞和事件驱动机制让js宏观上并行。8gb内存——40000用户。当前请求（计算）暂停，其他请求放入事件站循环，当当前请求需要数据库时会被放入事件站中，即：<img src="https://img-blog.csdn.net/20181014221855147?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTY1MTA4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="单线程"><br>i/o读数据库，这个过程中node.js可以处理下一个请求，直到i/o返回值，继续进行前请求。<br>使操作系统完全不再有线程创建·销毁的事件开销<br>能使cpu利用率百分之百<br>一个用户线程的崩溃将导致所有用户线程崩溃。<br>2.非阻塞i/o：<br>传统的线程处理机制中，执行了i/o访问数据库代码后，整个线程都讲停下来等待数据库返回值，随后进行下一步代码。即这种机制下的i/o阻塞了程序的执行。而node.js在执行访问数据库时会立即执行后面的代码<br>如：<br>fs.readfile(“text1”,function(){</p><p>}<br>    a++;<br>其中a++语句不会被访问数据库代码阻塞运行。<br>机制：线程的事件循环不断检查是否有未处理的事件并依次处理。完成事件的调动。<br>3.事件驱动：<br>客户端请求连接，提交数据等行为会触发相应的事件（node中同一时刻一个线程只能执行一个回调函数，中途可以处理其他事件——事件环）<img src="https://img-blog.csdn.net/20181014225706504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTY1MTA4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>*node适合有大量并发i/o但响应前不需要复杂计算的程序（擅长i/o即任务调动单不擅长计算）</p><p>node不适合需要极高可靠性的业务。（是一种小工具但不健壮）</p><h2 id="我的第一次node代码"><a href="#我的第一次node代码" class="headerlink" title="我的第一次node代码"></a>我的第一次node代码</h2><pre><code>var http=require("http");//require表示引包，即引用自己的一个特殊功能var server =  http.createServer(function(req,res){//创建服务器，参数为回调函数，表示若有请求则执行什么res.writeHead(200,{"Content-type":"text/html;charset=UTF-8"});//设置http头部，状态码为200，文件类型为html，字符类型为utf-8res.end("ancsjannaalscmafwrf" + (1+2+3) +"s");});server.listen(3000,"127.0.0.1");//运行服务器，监听3000端口</code></pre><p>ctrl+c可以中断挂起服务器<br>终端输入cd:\xxx表示进入某个文件，dir显示文件中的子文件<br>tab自动补全</p><p>node.js没有根目录的概念——没有任何web容器，路由相关。<br>            所以它很难提供静态服务。</p><p>查询字符串的模块：url和querystring</p><p><code>var http=require("http");</code><br><code>var url = require("url');</code><br>    //url.parse（）可以将一个完整的url地址分开为href协议，slashes斜杠，host主机名，端口号port，路径pathname，path（带上地址后的query），query（用户字符串）<br>    <code>var path = url.parse(req.url).pathname;</code><br>    //路径<br>    <code>var query = url.parse(req.url).query;</code><br>    //var query = url.parse(req.url，true).query;这里的true把长串转换成对象。即把查询遍为对象，直接打点来得到相应的参数。相当于querystring函数。<br>    //var一个age =query.age再console.log便可以把query里的age提取并输出出来<br>    //查询的东西<br>    <code>console.log(path);</code><br>    <code>console.log("query"+query);</code><br>    <code>querystring.parse（'foo=bar&abc=xyz&abc=123'）</code><br>    //returns<br>   <code>{</code><br>      <code>foo: 'bar',</code><br>    <code>abc: ['xyz', '123']</code><br>   <code>}</code><br>    // 假设存在 gbkDecodeURIComponent 函数。<br>    //规定编码方式<br>    <code>querystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,                      { decodeURIComponent: gbkDecodeURIComponent });</code></p><p>运行流程：<br>写好html和node.js后，进入cmd，cd打开node.js代码所在的文件夹后，输入node xxx.js运行js文件，即可实现运行。</p><p>WebSocket协议允许了服务器主动发送信息给客户端。<br>用ws模块搭建websocket：</p><pre><code>// 导入WebSocket模块:const WebSocket = require('ws');// 引用Server类:const WebSocketServer = WebSocket.Server;// 实例化:const wss = new WebSocketServer({    port: 3000});</code></pre></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：由于所学不精，不够系统，笔记只记了感觉容易遗忘的知识点。仅供参考。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
      <category term="nodenote" scheme="http://yoursite.com/categories/node/nodenote/"/>
    
    
      <category term="非教学" scheme="http://yoursite.com/tags/%E9%9D%9E%E6%95%99%E5%AD%A6/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>web前端杂笔</title>
    <link href="http://yoursite.com/2019/02/14/html%EF%BC%8Ccss%E5%92%8Cjs%E5%AD%A6%E4%B9%A0%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/02/14/html，css和js学习重要知识点/</id>
    <published>2019-02-14T05:45:22.000Z</published>
    <updated>2019-02-26T11:43:11.815Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>写在前面：由于所学不精，不够系统，笔记只记了感觉容易遗忘的知识点。仅供参考。<br><a id="more"></a></p><ol><li><p><strong>消除</strong>列表原点： list-style：none||list-style-type：none</p></li><li><p><strong>消除</strong>链接下划线：text-decoration：none（应用于<a></a> ）</p></li><li>对元素设置display：block使其变成块元素，如：<code>a{display:block;}</code>可以把a相应的链接方式变成块状点击。</li><li>text-align是将文本中央对齐于<strong>块</strong>中</li><li>语义部分：<br>(1).  <strong>strong 是标明重点内容， 有语气加强的含义， 使用阅读设备阅读网络时<strong>会重读， 而<b>是展示强调内容。</b></strong>strong 是标明重点内容， 有语气加强的含义， 使用阅读设备阅读网络时<strong>会重读， 而<b>是展示强调内容。<br>i 内容展示为斜体， em 表示强调的文本；<br>(2).自然样式标签<br>b, i, u, s, pre<br>语义样式标签<br>strong, em, ins, del, code**<br>(3).<span标签是没有语义的，它的作用就是为了设置单独的样式。把一段话圈起来，然后用css设置样式。<br>(4).语义化的作用<br> 1更容易被搜索引擎收录。<br> 2 更容易让屏幕阅读器读出网页内容。<br>(5).<q>引用</q>这里用<q>标签的真正关键点不是它的默认样式双引号而是它的语义：引用别人的话.</q></b></strong></strong></li><li>display 有哪些值？ 说明他们的作用<br>block 块类型。 默认宽度为父元素宽度， 可设置宽高， 换行显示。<br>none 缺省值。 象行内元素类型一样显示。 即隐藏不展示<br>inline 行内元素类型。 默认宽度为内容宽度， 不可设置宽高， 同行显示。<br>inline-block 默认宽度为内容宽度， 可以设置宽高， 同行显示。<br>list-item 象块类型元素一样显示， 并添加样式列表标记。<br>table 此元素会作为块级表格来显示。<br>inherit 规定应该从父元素继承 display 属性的值。</li><li>margin 是用来隔开元素与元素的间距； padding 是用来隔开元素与内容的间隔。<br>margin 用于布局分开元素使元素与元素互不相干；<br>padding 用于元素与内容之间的间隔， 让内容（ 文字） 与（ 包裹） 元素之间有一段距离。</li><li><br/换行<br> <hr/分割线（可用css修改线的样式）</li><li><p>img语法：<br><code><img src="图片地址" alt="下载失败时的替换文本" title = "提示文本"></code><br>举例：</p><figure class="highlight plain"><figcaption><span>src </span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">讲解：</span><br><span class="line">1. src：标识图像的位置；</span><br><span class="line">2. alt：指定图像的描述性文本，当图像不可见时（下载不成功时），可看到该属性指定的文本；</span><br><span class="line">3. title：提供在图像可见时对图像的描述(鼠标滑过图片时显示的文本)；</span><br><span class="line">4. 图像可以是GIF，PNG，JPEG格式的图像文件。</span><br><span class="line"></span><br><span class="line">10. 文本域textarea支持多行文本输入</span><br><span class="line">当用户需要在表单中输入大段文字时，需要用到文本输入域。</span><br><span class="line">语法：</span><br><span class="line">```<textarea  rows="行数" cols="列数">文本</textarea></span><br></pre></td></tr></tbody></table></figure><ol><li><p>textarea标签是成对出现的，以</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2. cols ：多行输入域的列数。</span><br><span class="line">3. rows ：多行输入域的行数。</span><br><span class="line"></span><br><span class="line">11. 单选框，复选框</span><br><span class="line">语法：</span><br><span class="line">```<input   type="radio/checkbox"   value="值"    name="名称"   checked="checked"/></span><br></pre></td></tr></tbody></table></figure><p></p></li><li><p>type:<br>当type=”radio”时，控件为单选框<br>当type=”checkbox”时，控件为复选框</p></li><li>value：提交数据到服务器的值（后台程序PHP使用）</li><li>name：为控件命名，以备后台程序ASP、PHP使用</li><li>checked：当设置checked=”checked”时，该选项被默认选中<br>注意：同一组的单选按钮，name取值一定要一致，这样同一组的单选按钮才可以起到单选的作用</li></ol></li><li><p>Label 的作用是什么？是怎么用的？<br>label 标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单上。例子：</p><figure class="highlight plain"><figcaption><span>for</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```<input type="text" name="Name" id="Name"/></span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">13. placeholder属性可以提供输入字段预期值展示，在输入时消失。</span><br><span class="line">      适用于以下的`<input>`类型：text，search，url，telephone，password和email。</span><br><span class="line"></span><br><span class="line">14. ```<input type="reset" value=重置>```为重置按钮，当点击后使输入框重置。注意：此按钮会重置所有输入框内容。</span><br><span class="line"> </span><br><span class="line">15. 伪类选择符</span><br><span class="line"></span><br><span class="line">伪类选择符允许给html不存在的标签设置样式，比如说我们给html中一个标签元素的鼠标滑过的状态来设置字体颜色：</span><br><span class="line">a:hover{color:red;}</span><br><span class="line">这行代码会使被<a></a>标签包裹的文字内容中的“胆小如鼠”字体颜色在鼠标滑过时变为红色。</span><br><span class="line"></span><br><span class="line">16. 标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。例如下面的代码：</span><br><span class="line">`p{color:red;} /*权值为1*/`</span><br><span class="line"></span><br><span class="line">`p span{color:green;} /*权值为1+1=2*/`</span><br><span class="line"></span><br><span class="line">`.warning{color:white;} /*权值为10*/`</span><br><span class="line"></span><br><span class="line">`p span.warning{color:purple;} /*权值为1+1+10=12*/`</span><br><span class="line"></span><br><span class="line">`#footer .note p{color:yellow;} /*权值为100+10+1=111*/`</span><br><span class="line"></span><br><span class="line">17. 重要性优先</span><br><span class="line"></span><br><span class="line">我们在做网页代码的时，有些特殊的情况需要为某些样式设置具有最高权值，怎么办？这时候我们可以使用!important来解决。</span><br><span class="line">如下代码：</span><br><span class="line">`p{color:red!important;}`</span><br><span class="line">`p{color:green;}`</span><br><span class="line">```<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p></span><br></pre></td></tr></tbody></table></figure><pre><code>这时 p 段落中的文本会显示的red红色。注意：!important要写在分号的前面。</code></pre><ol start="17"><li><p>删除线： p a{text-decoration:line-through;}</p></li><li><p>1，段落缩进<br>中文文字中的段前习惯空两个文字的空白，这个特殊的样式可以用下面代码来实现：<br>p{text-indent:2em;}</p><pre><code>2，段落排版--行间距</code></pre><p>行间距属性（line-height），如下代码实现设置段落<strong>行间距</strong>为1.5倍。<br>p{line-height:1.5em;}</p><pre><code>3，段落排版--字间距、字母间距**文字**间隔、**字母**间隔设置：如果想在网页排版中设置文字间隔或者字母间隔就可以使用    letter-spacing来实现，如下面代码：h1{    letter-spacing:50px;}<h1>了不起的盖茨比</h1>注意：这个样式使用在英文单词时，是设置字母与字母之间的间距。 单词间距设置：使用word-spacing来实现。如下代码：h1{ word-spacing:50px;<figure class="highlight plain"><figcaption><span>to imooc!```</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">19. 常用的块状元素有：</span><br><span class="line">```<div>、<p>、<h1>...<h6>、<ol>、<ul>、<dl>、<table>、<address>、<blockquote> 、<form></span><br></pre></td></tr></tbody></table></figure></code></pre></li></ol><p>常用的内联元素有：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常用的内联块状元素有：</span><br><span class="line">```<img>、<input></span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>块级元素特点：</code></pre><p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。<br>2、元素的高度height、宽度width、行高以及顶和底边距都可设置。<br>3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。<br>    行内元素相反。<br>    内联块级元素：<br>    inline-block元素特点：<br>1、和其他元素都在一行上；<br>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p><ol start="20"><li>盒模型：<br>  （1）边框border：盒子模型的边框就是围绕着内容及补白的线。拥有3个属性：粗细（border-width）、样式（-style<虚线dashed，点线dotted，实线solid>）和颜色（-color），分为border-top，-bottom，-left，-right四边。<br>  （2）边界margin：元素与其它元素之间的距离可以使用margin来设置。边界也是可分为上、右、下、左（顺序）。<pre><code>下代码：</code></pre>div{margin:20px 10px 15px 30px;}<br>也可以分开写：<br>div{<br>margin-top:20px;<br>margin-right:10px;<br>margin-bottom:15px;<br>margin-left:30px;}<br>如果上下左右的边界都为10px;可以这么写：<br>div{ margin:10px;}<br>如果上下边界一样为10px，左右一样为20px，可以这么写：<br>div{ margin:10px 20px;}<br>ps：padding和margin的区别，padding在边框里，margin在边框外。<br>（3）填充padding：元素内容与边框之间是可以设置距离的，称之为填充padding。填充也可分为上、右、下、左（顺序同margin）。<br>（4）内容content：根据具体内容可进行编辑，如分为文本text，图片img等。</li><li>布局<pre><code>在网页中，元素有三种布局模型：1、流动模型（Flow）    流动布局模型具有2个比较典型的特征：</code></pre>第一点，块状元素都会在所处的<strong>包含元素内</strong>自上而下按顺序垂直延伸分布，在默认状态下，块状元素的宽度都为100%，会以行的形式占据位置。<br>第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。<pre><code>（块状上下，内联左右）2、浮动模型 (Float)    任何元素在默认情况下是不能浮动的，但可以用CSS定义为浮动，如div、p、table、img等元素都可以被定义为浮动。如下代码可以实现两个div元素一行显示。</code></pre>div{<br>width:200px;<br>height:200px;<br>border:2px red solid;<br><strong>float</strong>:left;<br>}<figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```<div id="div2"></div></span><br></pre></td></tr></tbody></table></figure></li></ol><p>注意：设置浮动的同时一定要<strong>先设置块状元素的宽度</strong>，且需要浮动的几个元素宽度加起来一定要<strong>小于容器元素的宽度</strong>。<br>        3、层模型（Layer）<br>            层模型有三种形式：<br>            1、绝对定位(position: absolute)——相对于<strong>父位</strong>（参照定位的元素必须加入position:relative;）<br>                这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个<strong>具有定位属性的父包含块</strong>进行绝对定位。如果不存在这样的包含块，<strong>则相对于body元素</strong>，即相对于<strong>浏览器窗口</strong>。<br>            2、相对定位(position: relative)——相对于移动前的位置而不是父位<br>            3、固定定位(position: fixed)——<strong>相对于网页窗口静止</strong>，即拖动滚动条时位置固定不变。（与background-attachment:fixed?属性功能相同）</p><ol start="22"><li><p>在有相同权值的情况下，优先顺序是内联式>嵌入式>外部式。</p></li><li><p>通用选择器 *{CSS内容}；作用于所有标签。</p></li><li><p>块状元素的居中需要将margin的left、right值设置为auto  。</p></li><li><p><strong>文本特殊</strong></p><pre><code>(1)我的文字后有<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">我的文字后有```<sup>上标</sup>```——添加文本的上标</span><br><span class="line">(2) ```<i>字体倾斜</i>```——istatic</span><br><span class="line"> (3)```<abbr title="This is my senior high school teacher">Teacher</abbr> ```——缩写，详细信息通过鼠标停留显示</span><br><span class="line"></span><br><span class="line">26.  </span><br><span class="line">（1）</span><br><span class="line">```<a href="#tips">有用的提示</a>```定义**该文件中**的文本书签tips</span><br><span class="line"> ```<a href="file:///Users/thor/Desktop/10.2(1).html#tips" target="_blank">有用的提示</a>```定义指向**其他文件中**的地址的书签（target="_blank"——新网页打开）</span><br><span class="line"> （2）</span><br><span class="line">  ```<a name="tips">基本的注意事项-小提示</a> ```定义后文中tips的位置（name或者id等可以）</span><br><span class="line"> （3）若想用图片等作为链接点，只需要将对应代码填入```<a href="想要前往的地址"></a>```中。</span><br><span class="line"></span><br><span class="line">27. <table>制表格时</span><br><span class="line">（1）</span><br><span class="line">```<th colspan="2">a</th></span><br></pre></td></tr></tbody></table></figure>    可以构建两**横格**为一格的格子，内容为a；colspan换成rowspan可以构建两**竖格**为一格的格子。</code></pre><p>（2）在table属性中加入cellspacing=”xx”可改变<strong>单元格间距</strong>——单元格间的距离；加入cellpadding可改变<strong>单元格边距</strong>——单元格的内容与边框的距离。<br>（3）在table属性中加入background=”某图片地址”，可将图片插入表格中。</p></li><li><p>input相关<br>(1)在input语句（内有list=”XX”为datalist定位)后加入(1)在input语句（内有list=”XX”为datalist定位)后加入</p><figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```<option value="..."></span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight plain"><figcaption><span>value</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```...</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以使该输入框变为单选，选项为value值。</span><br><span class="line">ps：任何需要提交value值给后端的input都必须要加入name=""属性，从而在后端储存。</span><br><span class="line">(2)在input的button等语句中加入onclick="alert('声明')"可以在点击时产生声明动作。如</span><br><span class="line">```<input type="button" onclick="alert('Sorry,we are trying to resolve.')" value="Any false?"></span><br></pre></td></tr></tbody></table></figure><ol start="29"><li>插入js<figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入css```<link rel="stylesheet" type="text/css" href="cs地址"/></span><br></pre></td></tr></tbody></table></figure></li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：由于所学不精，不够系统，笔记只记了感觉容易遗忘的知识点。仅供参考。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
      <category term="html &amp; css" scheme="http://yoursite.com/categories/web/html-css/"/>
    
    
      <category term="非教学" scheme="http://yoursite.com/tags/%E9%9D%9E%E6%95%99%E5%AD%A6/"/>
    
      <category term="web前端" scheme="http://yoursite.com/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>java笔记综合</title>
    <link href="http://yoursite.com/2019/02/14/Java%E5%90%8E%E7%AB%AF%E7%89%B9%E6%AE%8A%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/02/14/Java后端特殊细节记录/</id>
    <published>2019-02-14T05:02:22.000Z</published>
    <updated>2019-03-05T06:46:32.968Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>写在前面：由于在下所学不精，不够系统，此笔记只记了感觉容易遗忘或特殊的知识点，可作为复习查漏用，切不可用于系统学习。仅供参考。</p><a id="more"></a><p>##Java细节</p><ol><li><p>##java的实例变量和局部变量：  ##</p><p> 实例变量含义：定义在类中但在任何方法之外。（New出来的均有初始化）</p><p> 与局部变量的异同：(局部变量：定义在方法之中的变量）</p><ol><li><p>局部变量要先赋值，再进行运算，而实例变量均已经赋初值。</p></li><li><p>实例变量的对象赋初值为null。</p></li><li><p>局部变量不允许范围内定义两个同名变量。实例变量的作用域在本类中完全有效，当被其他的类调用的时候也可能有效。</p></li><li><p>实例变量和局部变量都允许命名冲突。代码实例：</p><pre><code>public class Sample{    private int a=1; //实例变量    public void b(){        int a=2; //局部变量        System.out.println("局部变量:a="+a);        System.out.println("实例变量:a="+this.a);    //局部变量的作用域内引用实例变量方法:this.变量名    }    public static void main(String[] args){        new Sample().b();    }}</code></pre></li></ol></li></ol><hr><h2 id="2-构造器："><a href="#2-构造器：" class="headerlink" title="2. 构造器："></a>2. 构造器：</h2><p>构造器就是<strong>和类名相同</strong>但<strong>无返回类型</strong>的方法。创建构造器就是构建特定方法。而构造器最大的用处就是<em>在创建对象时执行初始化</em>。每当创建一个对象时，系统会为这个对象的实例进行默认的初始化。如果想改变这种默认的初始化，就可以通过自定义构造器来实现。<br>比如 </p><pre><code>class A {    public A()    {    }}//其中A方法 就是class A的构造器 虽然构造器没有返回值但可以有参数如class A {    public A(String a,String b)    {    }}一个类也可以有多个构造器如class A {    public A()    {    }     public A(String a,String b)    {    }}</code></pre><p>当你new A（）时，无参那个构造器被调用，当你new A（”ddd”,”fff”）时，那个有参的构造器被调用，如果你没有写构造器则jvm会调用一个<strong>默认的无参的构造器</strong>（故调用父类默认构造器的条件：子类没有声明任何构造器；编译器为子类加的缺省构造器一定为无参数的构造器；父类一定要存在一个无参数的构造器）。</p><p>PS：构造器在类初始化的时候被调用通常被用来做一些初始化的工作。</p><p>构造器与方法的具体差异：</p><ol><li><p>功能和作用的不同</p><p>构造器是为了创建一个类的实例。用来创建一个对象，同时可以给属性做初始化。这个过程也可以在创建一个对象的时候用到：Platypus p1 = new Platypus();</p><p>相反，方法的作用仅仅是功能函数，执行java代码。</p></li><li><p>修饰符，返回值和命名的不同</p></li></ol><pre><code>和方法一样，构造器可以有任何访问的修饰： public, protected, private或者没有修饰. 不同于方法的是，构造器不能有以下**非访问性质**的修饰： abstract, final, native, static, 或者 synchronized。</code></pre><ol start="3"><li><p>返回类型</p><p><strong>方法必须要有返回值</strong>，能返回任何类型的值或者空返回值（void），构造器没有返回值，也不需要void。</p></li><li><p>命名</p><p><strong>构造器使用和类相同的名字</strong>，而方法则不同。按照习惯，方法通常用小写字母开始，而构造器通常用大写字母开始。</p><p>构造器通常是一个名词，因为它和类名相同；而方法通常更接近动词，因为它说明一个操作。</p></li><li><p>调用</p><p>构造：只有在对象创建的时候才会去调用，而且只会调用一次。</p><p>方法：在对象创建之后才可以调用，并且可以调用多次。</p></li><li><p>“this”的用法</p><p>方法引用this指向<strong>正在执行方法的类的实例</strong>。静态方法不能使用this关键字，因为<strong>静态方法不属于类的实例</strong>，所以this也就没有什么东西去指向。构造器的this指向<strong>同一个类</strong>中，不同参数列表的另外一个构造器。下面的代码：<br>在代码中，有2个不同参数列表的构造器。第一个构造器，给类的成员name赋值，第二个构造器，调用第一个构造器，给成员变量name一个初始值 “John/Mary Doe”.<br>在构造器中，如果要使用关键字this,那么必须放在第一行，如果不这样将导致一个编译错误。</p></li></ol><pre><code>public class Platypus {     String name;     Platypus(String input) {         name = input;     }     Platypus() {         this("John/Mary Doe");     }     public static void main(String args[]) {         Platypus p1 = new Platypus("digger");         Platypus p2 = new Platypus();     } } </code></pre><ol start="7"><li><p>继承</p><p>  构造器是<strong>不能被继承</strong>的。子类可以继承超类的任何方法。</p></li></ol><hr><h2 id="做后端时遇到的细节："><a href="#做后端时遇到的细节：" class="headerlink" title="做后端时遇到的细节："></a>做后端时遇到的细节：</h2><ol><li><p>@的用法</p><p> 语法: @关键字(值) </p><p> @用于把关键字和值传递给编译器，更精确低控制编译器的动作。<br> 关键字都是随技术、框架、编译器的不同而不同，含义也不同、数量不定。可以由子技术或开发者扩充。<br> 比如:</p><pre><code>@override </code></pre><p> 说明将重写下个出现的方法。</p><pre><code>@WebServlet(  name="Hello",   urlPatterns={"/hello.view"},   loadOnStartup=1 )  public class HelloServlet extends HttpServlet { </code></pre><p> 上面的@WebServlet告知容器，HelloServlet这个Servlet的名称是Hello，这是由name属性指定的；而如果客户端请求的URL是/hello.view，则由具Hello名称的Servlet来处理，这是urlPatterns属性来指定的。在Java EE相关应用程序中使用标注@时，可以注意到，我们没有设置的属性通常会有默认值。例如，若没有设置@WebServlet的name属性，默认值会是Servlet的类完整名称。</p><p> 另外，@标注不是语句，不应加入;结束分号。而且也要导入相关：</p><pre><code>import javax.servlet.annotation.WebServlet;</code></pre></li><li><p>request的getRequestDispatcher()方法能实现两种跳转：</p><p> （1）跳转到一个servlet</p><pre><code>request.getRequestDispatcher("跳转的servlet名").forward(request, response);</code></pre><p> （2）跳转到一个页面</p><pre><code>request.getRequestDispatcher("文件路径").forward(request, response);</code></pre><p> 同时，forward方法成功后可以将request和response传递该下一个jsp 、servlet、html等（但不能够连续传递），从而可以实现在下一个界面再次得到第一次获得的request信息并处理等操作。</p></li><li><p>servlet的严格</p><p> servlet格式要求非常高。每一个servlet类，都需要有一个servlet集和servlet-mapping集，且二者name对应。其中servlet集还有servlet–class编译文件名，mapping中的url必须要有/起头，表示调用到这个servlet时要转到的地址为 上下文/xxx。倘若格式出错，极有可能导致tomcat异常，如启动后无法打开localhost等。<br> 代码示例：</p><pre><code><servlet><servlet-name>LoginServlet</servlet-name><servlet-class>LoginServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>LoginServlet</servlet-name>    <url-pattern>/login</url-pattern></servlet-mapping></code></pre></li><li><p>html与sevlet的交互</p><p> 原理：html(或jsp)使用servlet的方法是在表单中的action属性填入去掉/的url地址。触发提交表单动作action时，浏览器会自动在原地址后添加/xxx并转入该地址页面，同时寻找该url对应的servlet并执行相应javaclass编译文件。<br> 代码示例：</p><pre><code><form action="login" method="post">管理员名：<input type="text" name="username">密码：    <input type="password" name="userpwd">          <input type="submit" value="登录"></form>    </code></pre><p> 可以看到，action中的值 login 对应servlet的url地址。如此可以实现前端——>servlet——>后端的通路。</p></li><li><p>前后端乱码问题</p><p> 由于浏览器，控制台和IDE对字符的转码格式不一定相同，当需要接受或传送字符时，我们需要设置相应的request和response属性，且这种设置要早于其他调用，如要在response.getWriter方法前设置好转码格式，从而避免乱码。<br> 目前我在用的好用的调整转码格式代码:</p><pre><code>request.setCharacterEncoding("utf8");response.setContentType("text/html;charset=utf-8");</code></pre></li><li><p>JDBC连接数据库的步骤：</p><ol><li><p>加载数据库驱动到JVM（JAVA VIRTUAL MACHINE)</p><pre><code>try{   //加载MySql的驱动类       Class.forName("com.mysql.cj.jdbc.Driver");//核心语句}catch(ClassNotFoundException e){       System.out.println("找不到驱动程序类 ，加载驱动失败！");       e.printStackTrace() ;   } </code></pre><p> <strong>注意：</strong></p><p> com.mysql.jdbc.Driver 是 mysql-connector-java 5中的，<br> com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6中的。请根据版本自行选择匹配的Driver。 </p><p> 成功加载后，Driver类的实例会被注册到DriverManager类中。</p></li><li><p>提供具体数据库的URL(路径)，数据库用户名和密码</p><p> 书写形式：协议：子协议：数据源标识<br> 协议：在JDBC中总是以jdbc开始<br> 子协议：是桥连接的驱动程序或是数据库管理系统名称。<br> 数据源标识：标记找到数据库来源的地址与连接端口。<br> 例如：（MySql的连接URL）</p><pre><code>//可以有这么长！jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=gbk; </code></pre><p> 这段url表示以本地3306端口连接mysql中的test数据库（假设mysql中已经创建test数据库）。</p><p> 其后还可以添加：</p><pre><code>   useUnicode=true            //表示使用Unicode字符集。characterEncoding=gbk    //字符编码方式。 serverTimezone=GMT%2B8  //设置时区。可以用于解决时区报错//简单项目用下面这钟就完事了jdbc:mysql://localhost:3306/test; </code></pre><p> 注意：</p><p> 如果java报错：The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more than one time zone，就应该将时区设置加入url中，或者在命令行直接改变所用数据库的时区等，以mysql为例详见<a href="https://www.jb51.net/article/84198.htm" target="_blank" rel="noopener">https://www.jb51.net/article/84198.htm</a></p></li><li><p>将第二步的信息传递给JDBC创建连接</p><p> 要连接数据库，首先需要向java.sql.DriverManager请求并获得Connection对象，该对象代表一个数据库的连接。<br> 使用这个</p><pre><code>DriverManager.getConnection(String url,String username,String password);</code></pre><p> 方法传入指定的欲连接的数据库的路径、数据库的用户名和<br>  密码来获得。<br>  例如：</p><pre><code>//连接MySql的test数据库，用户名是root,密码为123456String url = "jdbc:mysql://localhost:3306/test" ;    String username = "root" ;   String password = "123456" ;   try{       Connection conn = DriverManager.getConnection(url, username, password);   }catch(SQLException e){       System.out.println("数据库连接失败！");   e.printStackTrace() ;   }</code></pre></li><li><p>创建Statement从而能够在java中执行SQL语句</p><p> 要执行SQL语句，必须获得<strong>第三步创建的conn</strong>中的java.sql.Statement实例。Statement实例分以下3种类型：<br>1、执行静态SQL语句。通过Statement实例实现。<br>2、执行动态SQL语句。通过PreparedStatement实例实现（常用）。<br>3、执行数据库存储过程。通过CallableStatement实例实现。<br>具体的实现方式：   </p><pre><code>   Statement stmt = conn.createStatement();     PreparedStatement prst = conn.prepareStatement(sql);      CallableStatement cstmt =conn.prepareCall("{CALL demoSp(? , ?)}");//根据需要选择其中一种类型</code></pre><p> 此外，可以给prst的数据封编号以后续使用</p><pre><code>prst.setString(1, username);prst.setString(2, passwd);</code></pre></li><li><p>执行SQL语句   </p><p> Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdate和execute</p><p> 1、ResultSet executeQuery(String sqlString);：执行<strong>查询</strong>数据库的SQL语句。返回一个结果集（ResultSet）对象。<br> 2、int executeUpdate(String sqlString);：用于执行INSERT、UPDATE或DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等。<br> 3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的  语句。<br> 具体实现的代码：</p><pre><code>ResultSet rs = prst.executeQuery("SELECT * FROM ?");   int rows = prst.executeUpdate("INSERT INTO ?");   boolean flag = prst.execute(String sql); </code></pre></li><li><p>处理结果<br>两种情况：<br>1、执行更新,返回的是本次操作影响到的记录数。<br>2、执行查询,返回的结果是一个ResultSet对象。<br>ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些行中数据的访问。<br>使用结果集（ResultSet）对象的访问方法获取数据：</p><pre><code> while(rs.next()){   //rs.next()有true和false两个返回值     String name = rs.getString("name") ;         String pass = rs.getString(1) ; // 此方法比较高效    }注意：列是从左到右编号的，并且从列1开始</code></pre></li><li><p>关闭JDBC对象<br>操作完成以后要把所有使用的JDBC对象全部关闭，以释放JDBC资源，关闭顺序和声明顺序相反,后声明先关闭（类似栈）。顺序：<br>1、关闭记录集<br>2、关闭声明<br>3、关闭连接对象</p><pre><code>if(rs!= null){   // 关闭记录集   try{       rs.close() ;   }catch(SQLException e){       e.printStackTrace() ;   }   }   if(prst!= null){   // 关闭声明   try{       prst.close() ;   }catch(SQLException e){       e.printStackTrace() ;   }   }   if(conn!= null){  // 关闭连接对象   try{       conn.close() ;   }catch(SQLException e){       e.printStackTrace() ;   }   }  </code></pre><p>感谢：第六节JDBC连接逻辑大部分参考<a href="http://www.cnblogs.com/hongten/archive/2011/03/29/1998311.html" target="_blank" rel="noopener">http://www.cnblogs.com/hongten/archive/2011/03/29/1998311.html</a>。</p><p><strong>在此鸣谢！</strong></p></li></ol></li></ol><p>7. </p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：由于在下所学不精，不够系统，此笔记只记了感觉容易遗忘或特殊的知识点，可作为复习查漏用，切不可用于系统学习。仅供参考。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="javanote" scheme="http://yoursite.com/categories/java/javanote/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="非教学" scheme="http://yoursite.com/tags/%E9%9D%9E%E6%95%99%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="http://yoursite.com/2019/02/13/helloworld/"/>
    <id>http://yoursite.com/2019/02/13/helloworld/</id>
    <published>2019-02-13T11:23:22.000Z</published>
    <updated>2019-02-26T11:33:51.439Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这篇文章是你好师姐<br>雷猴</p></body></html>]]></content>
    
    <summary type="html">
    
      真的打错字了
    
    </summary>
    
    
  </entry>
  
</feed>
